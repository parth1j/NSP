
#user  nobody;
worker_processes  1;

error_log  logs/error.log;
error_log  logs/error.log  notice;
error_log  logs/error.log  info;

pid        logs/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    upstream flaskServer {
        zone upstream-flaskServer 64k;
        least_conn;
        server 127.0.0.1:5000 max_fails=3 fail_timeout=60 weight=1;
        server 127.0.0.1:5000 max_fails=3 fail_timeout=60 weight=1;
        server 127.0.0.1:5000 max_fails=3 fail_timeout=60 weight=1;

    }

    upstream authServer {
        zone upstream-authServer 64k;
        least_conn;
        server 127.0.0.1:7000 max_fails=3 fail_timeout=60 weight=1;
    }


    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location ~* \.(eot|ttf|woff|woff2)$ {
            add_header Access-Control-Allow-Origin *;
        }

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        
        location /inference {
            rewrite ^/inference/(.*)$ $1 break;
            proxy_pass http://flaskServer;
        }

        location /auth {
            rewrite ^/auth/(.*)$ $1 break;
            proxy_pass http://authServer;
        }
    }
}
